# .github/workflows/claude.yml
name: Claude Code Generator

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

jobs:
  claude-generate: # Renamed job for clarity
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event.name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')))
    runs-on: ubuntu-latest

    environment: testdev

    permissions:
      contents: read
      pull-requests: read
      issues: write
      id-token: write
      # Add workflow_dispatch permission to trigger the other workflow
      actions: write # Needed for workflow_dispatch

    outputs: # Define outputs if you need them later, e.g., for debugging
      claude_response: ${{ steps.claude-generate-code.outputs.response }} # Expose Claude's full response

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Run Claude Code Generation
        id: claude-generate-code # Changed ID for clarity
        uses: anthropics/claude-code-action@beta
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        with:
          # Keep your existing Claude Code Action configuration here
          # ...
          # Example of an explicit prompt that might lead to code generation
          direct_prompt: |
            Based on the following issue/comment:
            "${{ github.event.comment.body || github.event.issue.body || github.event.review.body }}"
            Please generate the necessary code changes to address it.
            Provide the code in a single markdown code block.
            Focus on creating a small, self-contained change.
          allowed_tools: "Bash(npm install),Bash(npm run build),Bash(npm run test),Bash(npm run lint)"

      - name: Extract Claude's Generated Code
        id: extract-code
        run: |
          RAW_RESPONSE="${{ steps.claude-generate-code.outputs.response }}"
          echo "Raw Claude Response:"
          echo "$RAW_RESPONSE"

          # Attempt to extract code block. Adjust regex if Claude's output format varies.
          # This regex captures content between ``` and ```.
          GENERATED_CODE=$(echo "$RAW_RESPONSE" | sed -n '/```/,/```/p' | grep -v '```')
          
          # Check if code was extracted
          if [ -z "$GENERATED_CODE" ]; then
            echo "::warning::No code block found in Claude's response. Exiting without creating PR."
            echo "has_code=false" >> $GITHUB_OUTPUT
          else
            echo "::notice::Code block successfully extracted."
            echo "$GENERATED_CODE" > generated_code.txt # Save to file for multi-line output
            echo "has_code=true" >> $GITHUB_OUTPUT
            # For multiline output, save to a file and read it later if needed, or use a specific output format.
            # For now, we'll rely on the file for the dispatch.
          fi
      
      - name: Dispatch PR Creation Workflow
        if: steps.extract-code.outputs.has_code == 'true' # Only dispatch if code was generated
        uses: actions/github-script@v7
        id: dispatch-pr-creation
        with:
          script: |
            const fs = require('fs');
            const generatedCode = fs.readFileSync('generated_code.txt', 'utf8');

            const pr_number = '${{ github.event.pull_request.number || github.event.issue.number }}';
            const issue_or_pr_id = pr_number ? `#${pr_number}` : 'Unknown';

            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'claude-create-pr.yml', # The file name of your PR creation workflow
              ref: context.ref, # Use the same branch/ref where the event occurred
              inputs: {
                pr_title: `feat(ai): Auto-generated changes for ${issue_or_pr_id}`,
                pr_body: `ðŸ¤– This Pull Request contains auto-generated code by Claude AI based on the prompt/issue ${issue_or_pr_id}.\n\n---Generated Code---\n\`\`\`\n${generatedCode}\n\`\`\`\n\n---Claude's Full Response---\n${process.env.RAW_CLAUDE_RESPONSE}\n\n`,
                generated_code: generatedCode,
                source_issue_or_pr: pr_number,
                source_event_type: context.eventName
              }
            });
            console.log('Dispatched claude-create-pr.yml workflow.');
        env:
          RAW_CLAUDE_RESPONSE: ${{ steps.claude-generate-code.outputs.response }} # Pass full response as an env var