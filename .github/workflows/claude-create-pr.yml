# .github/workflows/claude-create-pr.yml
name: Claude AI PR Creator

on:
  workflow_dispatch:
    inputs:
      pr_title:
        description: 'Title for the new Pull Request'
        required: true
        type: string
      pr_body:
        description: 'Body for the new Pull Request'
        required: true
        type: string
      generated_code:
        description: 'The code generated by Claude'
        required: true
        type: string
      source_issue_or_pr:
        description: 'The original issue or PR number that triggered Claude'
        required: false
        type: string
      source_event_type:
        description: 'The original event type that triggered Claude'
        required: false
        type: string

jobs:
  create-pr:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Needed to create branch and commit
      pull-requests: write # Needed to create PR
      id-token: write # If needed for any gh CLI usage or other actions

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Need full history to create new branch safely

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create new branch and apply changes
        id: create-branch
        run: |
          BRANCH_NAME="claude-fix-${{ github.event.inputs.source_issue_or_pr || github.run_id }}"
          git checkout -b "$BRANCH_NAME"

          CODE_FILE="claude_generated_code_${{ github.run_id }}.txt" # Unique name
          echo "${{ github.event.inputs.generated_code }}" > "$CODE_FILE"

          git add .
          git commit -m "${{ github.event.inputs.pr_title }}"
          git push origin "$BRANCH_NAME"

          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT

      - name: Generate Labels for PR
        id: generate-labels
        run: |
          LABELS="claude-auto-fix,review-needed" # Always include these
          
          SOURCE_TYPE="${{ github.event.inputs.source_event_type }}"
          SOURCE_ID="${{ github.event.inputs.source_issue_or_pr }}"

          if [ "$SOURCE_TYPE" == "issues" ] && [ -n "$SOURCE_ID" ]; then
            LABELS="${LABELS},from-issue-${SOURCE_ID}"
          elif [ "$SOURCE_TYPE" == "pull_request_review_comment" ] && [ -n "$SOURCE_ID" ]; then
            LABELS="${LABELS},from-pr-review-${SOURCE_ID}"
          fi
          
          echo "labels_csv=$LABELS" >> $GITHUB_OUTPUT

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: ${{ github.event.inputs.pr_title }}
          title: ${{ github.event.inputs.pr_title }}
          body: ${{ github.event.inputs.pr_body }}
          base: ${{ github.ref_name }} # Target the branch where this workflow was triggered
          head: ${{ steps.create-branch.outputs.branch_name }}
          add-paths: . # Add all unstaged files in the current directory (should be just the new code file)
          # --- MODIFIED LABELS SECTION ---
          labels: ${{ steps.generate-labels.outputs.labels_csv }}
          # --- END MODIFIED LABELS SECTION ---
          
          # --- MODIFIED ASSIGNEES SECTION ---
          # Use a variable or a fallback if github.event.sender.login isn't always valid
          # You might want to assign to the original PR author, or skip if none.
          # Here, we'll try to get the original PR author from the input 'source_issue_or_pr'
          # This requires that claude.yml passes the original PR author's login,
          # or you can fall back to the repo default.
          # Let's adjust claude.yml to pass original_pr_author
          assignees: | # Use multiline string for assignees
            ${{ github.event.inputs.original_pr_author || github.actor }} # Fallback to workflow actor (the bot)
          # --- END MODIFIED ASSIGNEES SECTION ---

      - name: Comment on Original Source (Optional)
        if: github.event.inputs.source_issue_or_pr
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SOURCE_ID: ${{ github.event.inputs.source_issue_or_pr }}
          SOURCE_TYPE: ${{ github.event.inputs.source_event_type }}
        run: |
          PR_URL=$(gh pr list --head ${{ steps.create-branch.outputs.branch_name }} --json url -q .[0].url || echo "")
          if [ -n "$PR_URL" ]; then
            COMMENT_BODY="ðŸ¤– Claude AI has generated code and created a Pull Request: ${PR_URL}"
            if [ "$SOURCE_TYPE" == "issues" ]; then
              gh issue comment $SOURCE_ID --body "$COMMENT_BODY"
            elif [ "$SOURCE_TYPE" == "pull_request_review_comment" ] || [ "$SOURCE_TYPE" == "pull_request_review" ]; then
              gh pr comment $SOURCE_ID --body "$COMMENT_BODY"
            else
              echo "Cannot comment on source type: $SOURCE_TYPE"
            fi
          else
            echo "Could not find created PR URL to comment on source."
          fi