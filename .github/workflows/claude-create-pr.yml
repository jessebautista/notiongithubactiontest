# .github/workflows/claude-create-pr.yml
name: Claude AI PR Creator

on:
  workflow_dispatch:
    inputs:
      pr_title:
        description: 'Title for the new Pull Request'
        required: true
        type: string
      pr_body:
        description: 'Body for the new Pull Request'
        required: true
        type: string
      generated_code:
        description: 'The code generated by Claude'
        required: true
        type: string
      source_issue_or_pr:
        description: 'The original issue or PR number that triggered Claude'
        required: false
        type: string
      source_event_type:
        description: 'The original event type that triggered Claude'
        required: false
        type: string

jobs:
  create-pr:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Needed to create branch and commit
      pull-requests: write # Needed to create PR
      id-token: write # If needed for any gh CLI usage or other actions

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Need full history to create new branch safely

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create new branch and apply changes
        id: create-branch
        run: |
          BRANCH_NAME="claude-fix-${{ github.event.inputs.source_issue_or_pr || github.run_id }}"
          git checkout -b "$BRANCH_NAME"

          # Write the generated code to a file.
          # You might need more sophisticated logic here to determine the file path
          # and how to apply the code (e.g., create new file, patch existing).
          # For a simple case, we'll write to a new file.
          # Consider an input for `target_file_path` from claude.yml if known.

          CODE_FILE="claude_generated_code_${{ github.run_id }}.txt" # Unique name
          echo "${{ github.event.inputs.generated_code }}" > "<span class="math-inline">CODE\_FILE"
\# Example\: If Claude provides file path info, you'd parse it and write to that path
\# echo "</span>{{ github.event.inputs.generated_code }}" > "path/to/my/file.js"

          git add .
          git commit -m "${{ github.event.inputs.pr_title }}"
          git push origin "$BRANCH_NAME"

          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: ${{ github.event.inputs.pr_title }}
          title: ${{ github.event.inputs.pr_title }}
          body: ${{ github.event.inputs.pr_body }}
          base: ${{ github.ref_name }} # Target the branch where this workflow was triggered
          head: ${{ steps.create-branch.outputs.branch_name }}
          add-paths: . # Add all unstaged files in the current directory (should be just the new code file)
          labels: |
            claude-auto-fix
            ${{ github.event.inputs.source_event_type == 'issues' && format('from-issue-{0}', github.event.inputs.source_issue_or_pr) || '' }}
            ${{ github.event.inputs.source_event_type == 'pull_request_review_comment' && format('from-pr-review-{0}', github.event.inputs.source_issue_or_pr) || '' }}
            review-needed # Automatically add the 'review-needed' label
          assignees: ${{ github.event.sender.login }} # Assign to the user who triggered Claude

      - name: Comment on Original Source (Optional)
        if: github.event.inputs.source_issue_or_pr
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SOURCE_ID: ${{ github.event.inputs.source_issue_or_pr }}
          SOURCE_TYPE: <span class="math-inline">\{\{ github\.event\.inputs\.source\_event\_type \}\}
run\: \|
PR\_URL\=</span>(gh pr list --head ${{ steps.create-branch.outputs.branch_name }} --json url -q .[0].url || echo "")
          if [ -n "$PR_URL" ]; then
            COMMENT_BODY="ðŸ¤– Claude AI has generated code and created a Pull Request: ${PR_URL}"
            if [ "$SOURCE_TYPE" == "issues" ]; then
              gh issue comment $SOURCE_ID --body "$COMMENT_BODY"
            elif [ "$SOURCE_TYPE" == "pull_request_review_comment" ] || [ "$SOURCE_TYPE" == "pull_request_review" ]; then
              gh pr comment $SOURCE_ID --body "$COMMENT_BODY"
            else
              echo "Cannot comment on source type: $SOURCE_TYPE"
            fi
          else
            echo "Could not find created PR URL to comment on source."
          fi